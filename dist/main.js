(()=>{"use strict";function e(){const e=document.querySelector(".add-task-and-list");document.querySelector(".add-task-form").style.display="none",e.style.display="grid"}function t(e,t,n,c){this.title=e,this.desc=t,this.date=n,this.priority=c}document.querySelector(".add-task-btn").addEventListener("click",(function(e){const t=document.querySelector(".add-task-and-list"),n=document.querySelector(".add-task-form");t.style.display="none",n.style.display="flex"})),document.querySelector(".go-back").addEventListener("click",e),document.querySelector(".task-submit-btn").addEventListener("click",(()=>{(function(){let e=function(){let e=document.getElementById("title").value,n=document.getElementById("description").value,c=document.getElementById("date").value;return""==e&&(e="Empty"),""==n&&(n="Empty"),""==c&&(c="date not mentioned."),new t(e,n,c,document.getElementById("priority").value)}();const n=document.querySelector(".list-of-tasks"),c=document.createElement("div");c.className="task";const a=document.createElement("div");a.className="title-desc-date";const s=document.createElement("h2");s.className="task-name",s.innerHTML=e.title;const l=document.createElement("h3");l.className="task-desc",l.innerHTML=e.desc;const i=document.createElement("p");i.className="task-due-date",i.innerHTML=`Due ${e.date}`,a.append(s,l,i);const o=document.createElement("div");o.className="checkbox-priority-del";const d=document.createElement("div");d.className="checkbox-div";const r=document.createElement("input");r.type="checkbox",d.name="checkbox",d.id="checkbox";const u=document.createElement("label");u.innerHTML="Done",u.htmlFor="checkbox",d.append(r,u);const m=document.createElement("p");m.className="priority-level",m.innerHTML=`${e.priority} priority`;const y=document.createElement("button");y.className="del-task-btn",y.innerHTML="Delete";const k=document.createElement("button");k.className="edit-task-btn",k.innerHTML="Edit",o.append(d,m,y,k),c.append(a,o),n.append(c)})(),e()})),document.querySelector(".list-of-tasks").addEventListener("click",(function(e){const t=document.querySelector(".add-task-and-list"),n=document.querySelector(".edit-task-info"),c=e.target.closest(".task");if("del-task-btn"==e.target.className&&c.remove(),"edit-task-btn"==e.target.className){let e=function(e){return{taskTitle:e.querySelector(".task-name").innerHTML,taskDesc:e.querySelector(".task-desc").innerHTML,taskDueDate:e.querySelector(".task-due-date").innerHTML,taskPriority:e.querySelector(".priority-level").innerHTML}}(c);const a=document.getElementById("editedTitle");a.value=e.taskTitle;const s=document.getElementById("editedDesc");s.value=e.taskDesc;const l=document.getElementById("editedDate");l.value=e.taskDueDate.slice(4);const i=document.getElementById("editedPriority");"low"==e.taskPriority.slice(0,3)?i.value=e.taskPriority.slice(0,3):"medium"==e.taskPriority.slice(0,6)?i.value=e.taskPriority.slice(0,6):"high"==e.taskPriority.slice(0,4)&&(i.value=e.taskPriority.slice(0,4)),document.querySelector(".edit-task-submit-btn").addEventListener("click",(()=>{a.value&&s.value&&l.value&&i.value&&function(e,t,n,c,a){const s=a.querySelector(".task-name"),l=a.querySelector(".task-desc"),i=a.querySelector(".task-due-date"),o=a.querySelector(".priority-level");s.innerHTML=e.value,l.innerHTML=t.value,i.innerHTML=`Due ${n.value}`,o.innerHTML=`${c.value} priority`}(a,s,l,i,c),t.style.display="grid",n.style.display="none"})),t.style.display="none",n.style.display="flex"}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFVcEMsT0FBU3NDLEVBQWN0QyxPQVlqRCxTQUEyQnVDLEVBQWFDLEVBQVlDLEVBQVlDLEVBQWdCaEIsR0FFNUUsTUFBTXJDLEVBQVFxQyxFQUFTekMsY0FBYyxjQUUvQkssRUFBT29DLEVBQVN6QyxjQUFjLGNBRTlCTSxFQUFPbUMsRUFBU3pDLGNBQWMsa0JBRTlCTyxFQUFXa0MsRUFBU3pDLGNBQWMsbUJBR3hDSSxFQUFNcUIsVUFBWTZCLEVBQVl2QyxNQUM5QlYsRUFBS29CLFVBQVk4QixFQUFXeEMsTUFDNUJULEVBQUttQixVQUFZLE9BQU8rQixFQUFXekMsUUFDbkNSLEVBQVNrQixVQUFZLEdBQUdnQyxFQUFlMUMsZ0JBQzNDLENBMUJpQjJDLENBQWtCVCxFQUFZQyxFQUFXQyxFQUFXRSxFQUFlWixHQUV4RTNDLEVBQWtCRyxNQUFNQyxRQUFVLE9BQ2xDc0MsRUFBYXZDLE1BQU1DLFFBQVUsVUFHakNKLEVBQWtCRyxNQUFNQyxRQUFVLE9BQ2xDc0MsRUFBYXZDLE1BQU1DLFFBQVUsTUFDakMsQ0FDSixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9zY3JpcHRzL2hhbmRsZUZvcm0uanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9zY3JpcHRzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvc2NyaXB0cy90YXNrcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzZW5kVGFza0Zvcm0oZSkge1xuICAgIC8vIEJveCBpbiBtYWluIGNvbnRlbnQgYXJlYS5cbiAgICBjb25zdCBhZGRUYXNrQW5kTGlzdEJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdGFzay1hbmQtbGlzdCcpXG4gICAgLy8gRm9ybSB0byBmaWxsIHRoZSB0YXNrIGluZm9ybWF0aW9uLlxuICAgIGNvbnN0IGZvcm1JbmZvRmlsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdGFzay1mb3JtJylcblxuICAgIC8vIFdoZW4gYWRkIHRhc2sgaXMgY2xpY2tlZCwgaGlkZSB0aGUgYm94ICYgZGlzcGxheSBmb3JtLlxuICAgIGFkZFRhc2tBbmRMaXN0Qm94LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICBmb3JtSW5mb0ZpbGwuc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xufVxuXG5mdW5jdGlvbiBnb0JhY2tUb0luZGV4KCkge1xuICAgIGNvbnN0IGFkZFRhc2tBbmRMaXN0Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC10YXNrLWFuZC1saXN0JylcbiAgICBjb25zdCBmb3JtSW5mb0ZpbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRhc2stZm9ybScpXG5cbiAgICBmb3JtSW5mb0ZpbGwuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIGFkZFRhc2tBbmRMaXN0Qm94LnN0eWxlLmRpc3BsYXkgPSAnZ3JpZCcgICAgXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRhc2sodGl0bGUsIGRlc2MsIGRhdGUsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgIHRoaXMuZGVzYyA9IGRlc2M7XG4gICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1UYXNrSW5mbygpIHtcbiAgICBsZXQgdGl0bGVWYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGl0bGUnKS52YWx1ZVxuICAgIGxldCBkZXNjVmFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2NyaXB0aW9uJykudmFsdWVcbiAgICBsZXQgZGF0ZVZhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXRlJykudmFsdWVcbiAgICBsZXQgcHJpb3JpdHlWYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpb3JpdHknKS52YWx1ZVxuXG4gICAgaWYodGl0bGVWYWwgPT0gJycpIHtcbiAgICAgICAgdGl0bGVWYWwgPSAnRW1wdHknXG4gICAgfSBcbiAgICBcbiAgICBpZihkZXNjVmFsID09ICcnKSB7XG4gICAgICAgIGRlc2NWYWwgPSAnRW1wdHknXG4gICAgfVxuXG4gICAgaWYoZGF0ZVZhbCA9PSAnJykge1xuICAgICAgICBkYXRlVmFsID0gJ2RhdGUgbm90IG1lbnRpb25lZC4nXG4gICAgfVxuXG4gICAgY29uc3QgdGFzayA9IG5ldyBjcmVhdGVUYXNrKFxuICAgICAgICB0aXRsZVZhbCxcbiAgICAgICAgZGVzY1ZhbCxcbiAgICAgICAgZGF0ZVZhbCxcbiAgICAgICAgcHJpb3JpdHlWYWxcbiAgICApXG5cbiAgICByZXR1cm4gdGFza1xufVxuXG5leHBvcnQge3NlbmRUYXNrRm9ybSwgZ29CYWNrVG9JbmRleCwgZ2V0Rm9ybVRhc2tJbmZvfSIsImltcG9ydCB7c2VuZFRhc2tGb3JtLCBnb0JhY2tUb0luZGV4fSBmcm9tICcuL2hhbmRsZUZvcm0uanMnXG5pbXBvcnQge2NyZWF0ZVRhc2ssIFRhc2tEZWxldGVBbmRFZGl0Rm9ybX0gIGZyb20gJy4vdGFza3MuanMnXG5cbi8vIFNlbmRzIGEgZm9ybSB0byBmaWxsIGluZm8gZm9yIG5ldyB0YXNrLlxuY29uc3QgY3JlYXRlVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdGFzay1idG4nKVxuY3JlYXRlVGFza0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNlbmRUYXNrRm9ybSlcblxuLy8gR29lcyBiYWNrIHRvIG1haW4gcGFnZSB3aGlsc3QgYWRkaW5nIHRhc2suXG5jb25zdCBnb0JhY2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ28tYmFjaycpXG5nb0JhY2tCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBnb0JhY2tUb0luZGV4KVxuXG4vLyBBZGRpbmcgdGFzayB0byBsaXN0XG5jb25zdCBhZGRUYXNrVG9MaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2stc3VibWl0LWJ0bicpXG5hZGRUYXNrVG9MaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNyZWF0ZVRhc2soKVxuICAgIGdvQmFja1RvSW5kZXgoKVxufSlcblxuLy8gSGFuZGxpbmcgZGVsZXRpb24gb2YgdGFza3Ncbi8vIERvaW5nIGl0IHRoaXMgd2F5IGJlY2F1c2UgZGVsZXRlIGJ1dHRvbiBub3QgYWRkZWQgLVxuLy8gVW50aWwgdGFzayBpcyBhZGRlZC5cbmNvbnN0IHBhcmVudEVsZW1PZkxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdC1vZi10YXNrcycpXG5wYXJlbnRFbGVtT2ZMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgVGFza0RlbGV0ZUFuZEVkaXRGb3JtKSIsImltcG9ydCB7IGdldEZvcm1UYXNrSW5mbyB9IGZyb20gXCIuL2hhbmRsZUZvcm1cIlxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrKCkge1xuICAgIC8vIEluZm8gZnJvbSBmb3JtXG4gICAgbGV0IGZvcm1JbmZvID0gZ2V0Rm9ybVRhc2tJbmZvKClcblxuICAgIC8vIFRoZSBsaXN0IHdoaWNoIHRoZSB0YXNrIHdpbGwgYmUgYXBwZW5kZWQgdG8uXG4gICAgY29uc3QgbGlzdE9mVGFza3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdC1vZi10YXNrcycpXG5cbiAgICAvLyBUaGUgdGFzayBpdHNlbGYuXG4gICAgY29uc3QgdGFzayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGFzay5jbGFzc05hbWUgPSAndGFzaydcblxuICAgIC8vIHRpdGxlLCBkZXNjICYgZGF0ZSBvZiB0YXNrLlxuICAgIGNvbnN0IHRpdGxlRGVzY0RhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRpdGxlRGVzY0RhdGUuY2xhc3NOYW1lID0gJ3RpdGxlLWRlc2MtZGF0ZSdcblxuICAgIGNvbnN0IHRhc2tUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJylcbiAgICB0YXNrVGl0bGUuY2xhc3NOYW1lID0gJ3Rhc2stbmFtZSdcbiAgICB0YXNrVGl0bGUuaW5uZXJIVE1MID0gZm9ybUluZm8udGl0bGVcblxuICAgIGNvbnN0IHRhc2tEZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKVxuICAgIHRhc2tEZXNjLmNsYXNzTmFtZSA9ICd0YXNrLWRlc2MnXG4gICAgdGFza0Rlc2MuaW5uZXJIVE1MID0gZm9ybUluZm8uZGVzY1xuXG4gICAgY29uc3QgdGFza0RhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcbiAgICB0YXNrRGF0ZS5jbGFzc05hbWUgPSAndGFzay1kdWUtZGF0ZSdcbiAgICB0YXNrRGF0ZS5pbm5lckhUTUwgPSBgRHVlICR7Zm9ybUluZm8uZGF0ZX1gXG5cbiAgICB0aXRsZURlc2NEYXRlLmFwcGVuZChcbiAgICAgICAgdGFza1RpdGxlLFxuICAgICAgICB0YXNrRGVzYyxcbiAgICAgICAgdGFza0RhdGVcbiAgICApXG5cbiAgICAvLyBDaGVja2JveCwgcHJpb3JpdHkgJiBkZWxldGlvbiBvZiB0YXNrLlxuICAgIGNvbnN0IGNoZWNrUHJpb3JEZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNoZWNrUHJpb3JEZWwuY2xhc3NOYW1lID0gJ2NoZWNrYm94LXByaW9yaXR5LWRlbCdcblxuICAgIC8vIEZvciBjaGVjYm94XG4gICAgY29uc3QgY2hlY2tib3hEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNoZWNrYm94RGl2LmNsYXNzTmFtZSA9ICdjaGVja2JveC1kaXYnXG5cbiAgICBjb25zdCBjaGVja2JveElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKVxuICAgIGNoZWNrYm94SW5wdXQudHlwZSA9ICdjaGVja2JveCdcbiAgICBjaGVja2JveERpdi5uYW1lID0gJ2NoZWNrYm94J1xuICAgIGNoZWNrYm94RGl2LmlkID0gJ2NoZWNrYm94J1xuXG4gICAgY29uc3QgbGFiZWxGb3JDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJylcbiAgICBsYWJlbEZvckNoZWNrYm94LmlubmVySFRNTCA9ICdEb25lJ1xuICAgIGxhYmVsRm9yQ2hlY2tib3guaHRtbEZvciA9ICdjaGVja2JveCdcblxuICAgIGNoZWNrYm94RGl2LmFwcGVuZChcbiAgICAgICAgY2hlY2tib3hJbnB1dCxcbiAgICAgICAgbGFiZWxGb3JDaGVja2JveFxuICAgIClcblxuICAgIC8vIFByaW9yaXR5IGxldmVsXG4gICAgY29uc3QgcHJpb3JpdHlMdmwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcbiAgICBwcmlvcml0eUx2bC5jbGFzc05hbWUgPSAncHJpb3JpdHktbGV2ZWwnXG4gICAgcHJpb3JpdHlMdmwuaW5uZXJIVE1MID0gYCR7Zm9ybUluZm8ucHJpb3JpdHl9IHByaW9yaXR5YFxuXG4gICAgLy8gRGVsZXRlIGJ1dHRvbiBmb3IgdGFza1xuICAgIGNvbnN0IHRhc2tEZWxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIHRhc2tEZWxCdG4uY2xhc3NOYW1lID0gJ2RlbC10YXNrLWJ0bidcbiAgICB0YXNrRGVsQnRuLmlubmVySFRNTCA9ICdEZWxldGUnXG5cbiAgICAvLyBFZGl0IGJ1dHRvbiBmb3IgdGFza1xuICAgIGNvbnN0IHRhc2tFZGl0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICB0YXNrRWRpdEJ0bi5jbGFzc05hbWUgPSAnZWRpdC10YXNrLWJ0bidcbiAgICB0YXNrRWRpdEJ0bi5pbm5lckhUTUwgPSAnRWRpdCdcblxuICAgIGNoZWNrUHJpb3JEZWwuYXBwZW5kKFxuICAgICAgICBjaGVja2JveERpdixcbiAgICAgICAgcHJpb3JpdHlMdmwsXG4gICAgICAgIHRhc2tEZWxCdG4sXG4gICAgICAgIHRhc2tFZGl0QnRuXG4gICAgKVxuXG4gICAgdGFzay5hcHBlbmQoXG4gICAgICAgIHRpdGxlRGVzY0RhdGUsXG4gICAgICAgIGNoZWNrUHJpb3JEZWxcbiAgICApXG5cbiAgICBsaXN0T2ZUYXNrcy5hcHBlbmQoXG4gICAgICAgIHRhc2tcbiAgICApXG59XG5cbi8vIEZ1bmN0aW9uIHRvIGhhbmRsZSB0aGUgZGVsZXRlIGJ1dHRvbiBjbGlja1xuZnVuY3Rpb24gVGFza0RlbGV0ZUFuZEVkaXRGb3JtKGUpIHtcbiAgICAvLyBCb3ggaW4gbWFpbiBjb250ZW50IGFyZWEuXG4gICAgY29uc3QgYWRkVGFza0FuZExpc3RCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRhc2stYW5kLWxpc3QnKVxuICAgIC8vIEZvcm0gdG8gZmlsbCB0aGUgdGFzayBpbmZvcm1hdGlvbi5cbiAgICBjb25zdCBlZGl0VGFza0luZm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZWRpdC10YXNrLWluZm8nKVxuICAgIC8vIENsb3NlcyB0YXNrIGl0ZW0gdG8gY2xpY2tlZCB0YXJnZXQuXG4gICAgY29uc3QgdGFza0l0ZW0gPSBlLnRhcmdldC5jbG9zZXN0KCcudGFzaycpO1xuXG4gICAgLy8gRGVsZXRpb24gb2YgdGFzay5cbiAgICBpZihlLnRhcmdldC5jbGFzc05hbWUgPT0gJ2RlbC10YXNrLWJ0bicpIHtcbiAgICAgICAgdGFza0l0ZW0ucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgLy8gRWRpdGluZyBvZiB0YXNrLlxuICAgIGlmKGUudGFyZ2V0LmNsYXNzTmFtZSA9PSAnZWRpdC10YXNrLWJ0bicpIHtcblxuICAgICAgICBsZXQgcHJldlRhc2tJbmZvID0gcmV0cmlldmVQcmV2VGFza0luZm8odGFza0l0ZW0pXG5cbiAgICAgICAgLy8gUHV0dGluZyBvbGQgdmFscyBpbnRvIGVkaXRpbmcgZm9ybVxuICAgICAgICAvLyBUaXRsZVxuICAgICAgICBjb25zdCBpbnB1dFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXRlZFRpdGxlJylcbiAgICAgICAgaW5wdXRUaXRsZS52YWx1ZSA9IHByZXZUYXNrSW5mby50YXNrVGl0bGVcbiAgICAgICAgLy8gRGVzY3JpcHRpb25cbiAgICAgICAgY29uc3QgaW5wdXREZXNjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXRlZERlc2MnKVxuICAgICAgICBpbnB1dERlc2MudmFsdWUgPSBwcmV2VGFza0luZm8udGFza0Rlc2NcbiAgICAgICAgLy8gRGF0ZVxuICAgICAgICBjb25zdCBpbnB1dERhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdGVkRGF0ZScpXG4gICAgICAgIGlucHV0RGF0ZS52YWx1ZSA9IHByZXZUYXNrSW5mby50YXNrRHVlRGF0ZS5zbGljZSg0KVxuICAgICAgICAvLyBQcmlvcml0eVxuICAgICAgICBjb25zdCBpbnB1dFByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXRlZFByaW9yaXR5JylcblxuICAgICAgICBpZihwcmV2VGFza0luZm8udGFza1ByaW9yaXR5LnNsaWNlKDAsIDMpID09ICdsb3cnKSB7XG4gICAgICAgICAgICBpbnB1dFByaW9yaXR5LnZhbHVlID0gcHJldlRhc2tJbmZvLnRhc2tQcmlvcml0eS5zbGljZSgwLCAzKVxuICAgICAgICB9IGVsc2UgaWYocHJldlRhc2tJbmZvLnRhc2tQcmlvcml0eS5zbGljZSgwLCA2KSA9PSAnbWVkaXVtJykge1xuICAgICAgICAgICAgaW5wdXRQcmlvcml0eS52YWx1ZSA9IHByZXZUYXNrSW5mby50YXNrUHJpb3JpdHkuc2xpY2UoMCwgNilcbiAgICAgICAgfSBlbHNlIGlmKHByZXZUYXNrSW5mby50YXNrUHJpb3JpdHkuc2xpY2UoMCwgNCkgPT0gJ2hpZ2gnKSB7XG4gICAgICAgICAgICBpbnB1dFByaW9yaXR5LnZhbHVlID0gcHJldlRhc2tJbmZvLnRhc2tQcmlvcml0eS5zbGljZSgwLCA0KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGZpbmlzaGluZyBlZGl0IGJ1dHRvbiBmb3IgdGFza1xuICAgICAgICBjb25zdCBmaW5pc2hFZGl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXQtdGFzay1zdWJtaXQtYnRuJylcbiAgICAgICAgZmluaXNoRWRpdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGlmKGlucHV0VGl0bGUudmFsdWUgJiYgaW5wdXREZXNjLnZhbHVlICYmIFxuICAgICAgICAgICAgICAgIGlucHV0RGF0ZS52YWx1ZSAmJiBpbnB1dFByaW9yaXR5LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgIHNldEVkaXRlZFRhc2tJbmZvKGlucHV0VGl0bGUsIGlucHV0RGVzYywgaW5wdXREYXRlLCBpbnB1dFByaW9yaXR5LCB0YXNrSXRlbSlcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRUYXNrQW5kTGlzdEJveC5zdHlsZS5kaXNwbGF5ID0gJ2dyaWQnXG4gICAgICAgICAgICBlZGl0VGFza0luZm8uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICB9KVxuXG4gICAgICAgIGFkZFRhc2tBbmRMaXN0Qm94LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgZWRpdFRhc2tJbmZvLnN0eWxlLmRpc3BsYXkgPSAnZmxleCdcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldEVkaXRlZFRhc2tJbmZvKGVkaXRlZFRpdGxlLCBlZGl0ZWREZXNjLCBlZGl0ZWREYXRlLCBlZGl0ZWRQcmlvcml0eSwgdGFza0l0ZW0pIHtcbiAgICAvLyBUYXNrIFRpdGxlXG4gICAgY29uc3QgdGl0bGUgPSB0YXNrSXRlbS5xdWVyeVNlbGVjdG9yKCcudGFzay1uYW1lJylcbiAgICAvLyBUYXNrIGRlc2NcbiAgICBjb25zdCBkZXNjID0gdGFza0l0ZW0ucXVlcnlTZWxlY3RvcignLnRhc2stZGVzYycpXG4gICAgLy8gVGFzayBkdWUgZGF0ZVxuICAgIGNvbnN0IGRhdGUgPSB0YXNrSXRlbS5xdWVyeVNlbGVjdG9yKCcudGFzay1kdWUtZGF0ZScpXG4gICAgLy8gVGFzayBwcmlvcml0eVxuICAgIGNvbnN0IHByaW9yaXR5ID0gdGFza0l0ZW0ucXVlcnlTZWxlY3RvcignLnByaW9yaXR5LWxldmVsJylcblxuICAgIC8vIE5vdyB1cGRhdGluZyBuZXdseSBlZGl0ZWQgaW5mby5cbiAgICB0aXRsZS5pbm5lckhUTUwgPSBlZGl0ZWRUaXRsZS52YWx1ZVxuICAgIGRlc2MuaW5uZXJIVE1MID0gZWRpdGVkRGVzYy52YWx1ZVxuICAgIGRhdGUuaW5uZXJIVE1MID0gYER1ZSAke2VkaXRlZERhdGUudmFsdWV9YFxuICAgIHByaW9yaXR5LmlubmVySFRNTCA9IGAke2VkaXRlZFByaW9yaXR5LnZhbHVlfSBwcmlvcml0eWBcbn1cblxuZnVuY3Rpb24gcmV0cmlldmVQcmV2VGFza0luZm8odGFza0l0ZW0pIHtcbiAgICAvLyBHZXR0aW5nIHByZXZpb3VzIGluZm9ybWF0aW9uXG4gICAgLy8gVGFzayBUaXRsZVxuICAgIGNvbnN0IHRhc2tUaXRsZSA9IHRhc2tJdGVtLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLW5hbWUnKS5pbm5lckhUTUxcbiAgICAvLyBUYXNrIGRlc2NcbiAgICBjb25zdCB0YXNrRGVzYyA9IHRhc2tJdGVtLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWRlc2MnKS5pbm5lckhUTUxcbiAgICAvLyBUYXNrIGR1ZSBkYXRlXG4gICAgY29uc3QgdGFza0R1ZURhdGUgPSB0YXNrSXRlbS5xdWVyeVNlbGVjdG9yKCcudGFzay1kdWUtZGF0ZScpLmlubmVySFRNTFxuICAgIC8vIFRhc2sgcHJpb3JpdHlcbiAgICBjb25zdCB0YXNrUHJpb3JpdHkgPSB0YXNrSXRlbS5xdWVyeVNlbGVjdG9yKCcucHJpb3JpdHktbGV2ZWwnKS5pbm5lckhUTUxcblxuICAgIHJldHVybiB7dGFza1RpdGxlLCB0YXNrRGVzYywgdGFza0R1ZURhdGUsIHRhc2tQcmlvcml0eX1cbn1cblxuZXhwb3J0IHtjcmVhdGVUYXNrLCBUYXNrRGVsZXRlQW5kRWRpdEZvcm19Il0sIm5hbWVzIjpbImdvQmFja1RvSW5kZXgiLCJhZGRUYXNrQW5kTGlzdEJveCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwiZGlzcGxheSIsImNyZWF0ZVRhc2siLCJ0aXRsZSIsImRlc2MiLCJkYXRlIiwicHJpb3JpdHkiLCJ0aGlzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJmb3JtSW5mb0ZpbGwiLCJmb3JtSW5mbyIsInRpdGxlVmFsIiwiZ2V0RWxlbWVudEJ5SWQiLCJ2YWx1ZSIsImRlc2NWYWwiLCJkYXRlVmFsIiwiZ2V0Rm9ybVRhc2tJbmZvIiwibGlzdE9mVGFza3MiLCJ0YXNrIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInRpdGxlRGVzY0RhdGUiLCJ0YXNrVGl0bGUiLCJpbm5lckhUTUwiLCJ0YXNrRGVzYyIsInRhc2tEYXRlIiwiYXBwZW5kIiwiY2hlY2tQcmlvckRlbCIsImNoZWNrYm94RGl2IiwiY2hlY2tib3hJbnB1dCIsInR5cGUiLCJuYW1lIiwiaWQiLCJsYWJlbEZvckNoZWNrYm94IiwiaHRtbEZvciIsInByaW9yaXR5THZsIiwidGFza0RlbEJ0biIsInRhc2tFZGl0QnRuIiwiZWRpdFRhc2tJbmZvIiwidGFza0l0ZW0iLCJ0YXJnZXQiLCJjbG9zZXN0IiwicmVtb3ZlIiwicHJldlRhc2tJbmZvIiwidGFza0R1ZURhdGUiLCJ0YXNrUHJpb3JpdHkiLCJyZXRyaWV2ZVByZXZUYXNrSW5mbyIsImlucHV0VGl0bGUiLCJpbnB1dERlc2MiLCJpbnB1dERhdGUiLCJzbGljZSIsImlucHV0UHJpb3JpdHkiLCJlZGl0ZWRUaXRsZSIsImVkaXRlZERlc2MiLCJlZGl0ZWREYXRlIiwiZWRpdGVkUHJpb3JpdHkiLCJzZXRFZGl0ZWRUYXNrSW5mbyJdLCJzb3VyY2VSb290IjoiIn0=