(()=>{"use strict";function e(){const e=document.querySelector(".add-task-and-list");document.querySelector(".add-task-form").style.display="none",e.style.display="grid"}function t(e,t,n,c){this.title=e,this.desc=t,this.date=n,this.priority=c}document.querySelector(".add-task-btn").addEventListener("click",(function(e){const t=document.querySelector(".add-task-and-list"),n=document.querySelector(".add-task-form");t.style.display="none",n.style.display="flex"})),document.querySelector(".go-back").addEventListener("click",e),document.querySelector(".task-submit-btn").addEventListener("click",(()=>{(function(){let e=function(){let e=document.getElementById("title").value,n=document.getElementById("description").value,c=document.getElementById("date").value;return""==e&&(e="Empty"),""==n&&(n="Empty"),""==c&&(c="date not mentioned."),new t(e,n,c,document.getElementById("priority").value)}();const n=document.querySelector(".list-of-tasks"),c=document.createElement("div");c.className="task";const a=document.createElement("div");a.className="title-desc-date";const s=document.createElement("h2");s.className="task-name",s.innerHTML=e.title;const l=document.createElement("h3");l.className="task-desc",l.innerHTML=e.desc;const o=document.createElement("p");o.className="task-due-date",o.innerHTML=`Due ${e.date}`,a.append(s,l,o);const r=document.createElement("div");r.className="checkbox-priority-del";const d=document.createElement("div");d.className="checkbox-div";const i=document.createElement("input");i.type="checkbox",d.name="checkbox",d.id="checkbox";const u=document.createElement("label");u.innerHTML="Done",u.htmlFor="checkbox",d.append(i,u);const m=document.createElement("p");m.className="priority-level",m.innerHTML=`${e.priority} priority`;const y=document.createElement("button");y.className="del-task-btn",y.innerHTML="Delete";const k=document.createElement("button");k.className="edit-task-btn",k.innerHTML="Edit",r.append(d,m,y,k),c.append(a,r),n.append(c)})(),e()})),document.querySelector(".list-of-tasks").addEventListener("click",(function(e){const t=document.querySelector(".add-task-and-list"),n=document.querySelector(".edit-task-info"),c=e.target.closest(".task");if("del-task-btn"==e.target.className&&c.remove(),"edit-task-btn"==e.target.className){let e=function(e){return{taskTitle:e.querySelector(".task-name").innerHTML,taskDesc:e.querySelector(".task-desc").innerHTML,taskDueDate:e.querySelector(".task-due-date").innerHTML,taskPriority:e.querySelector(".priority-level").innerHTML}}(c);const a=document.getElementById("editedTitle");a.value=e.taskTitle;const s=document.getElementById("editedDesc");s.value=e.taskDesc;const l=document.getElementById("editedDate");l.value=e.taskDueDate.slice(4);const o=document.getElementById("editedPriority");"low"==e.taskPriority.slice(0,3)?o.value=e.taskPriority.slice(0,3):"medium"==e.taskPriority.slice(0,6)?o.value=e.taskPriority.slice(0,6):"high"==e.taskPriority.slice(0,4)&&(o.value=e.taskPriority.slice(0,4)),document.querySelector(".edit-task-submit-btn").addEventListener("click",(()=>{a.value&&s.value&&l.value&&o.value&&function(e,t,n,c,a){const s=a.querySelector(".task-name"),l=a.querySelector(".task-desc"),o=a.querySelector(".task-due-date"),r=a.querySelector(".priority-level");s.innerHTML=e.value,l.innerHTML=t.value,o.innerHTML=`Due ${n.value}`,r.innerHTML=`${c.value} priority`}(a,s,l,o,c),t.style.display="grid",n.style.display="none"})),t.style.display="none",n.style.display="flex"}})),document.querySelector(".tasks-and-projects").addEventListener("click",(function(e){const t=document.querySelector(".type-proj-name");if(10!=document.querySelector(".added-projects").childElementCount){if("add-proj-btn"==e.target.className&&(t.style.display="flex"),"submit-btn-proj"==e.target.className){const e=document.getElementById("projName").value;t.style.display="none",function(e){const t=document.querySelector(".added-projects");if(10==t.childElementCount)return;const n=document.createElement("button");n.className="Project",n.innerHTML=e,t.appendChild(n)}(e)}}else document.querySelector(".output-error").style.display="block"}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,